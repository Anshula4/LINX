# -*- coding: utf-8 -*-
"""LINXLOGIC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iHZ5FsVpvKLaLrDEIwwz95ZAj7IWyAH1
"""

# Cell 1: Install and Import Libraries
!pip install pandas openpyxl xlsxwriter
import pandas as pd
import numpy as np
from google.colab import files
import io
import warnings
from datetime import datetime
warnings.filterwarnings('ignore')

# Cell 2: Define Helper Functions
def upload_excel_file(file_type):
    print(f"\nPlease upload your {file_type} Excel file:")
    uploaded = files.upload()
    if uploaded:
        filename = list(uploaded.keys())[0]
        print(f"File uploaded: {filename}")
        try:
            df = pd.read_excel(io.BytesIO(uploaded[filename]))
            return df, filename
        except Exception as e:
            print(f"Error reading file: {str(e)}")
            return None, None

def preview_data(df, title, max_rows=3):
    if df is not None:
        print(f"\n{'='*50}")
        print(f"{title} Preview")
        print(f"{'='*50}")
        print(f"Shape: {df.shape[0]} rows × {df.shape[1]} columns")
        print(f"\nFirst {max_rows} rows:")
        print(df.head(max_rows).to_string())

# Cell 3: Create Language Lookup Table
def create_language_lookup():
    lookup_data = [
        ['AE', 'ENGLISH-ARABIC', 'SDWN EngArabic'],
        ['AO', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['AR', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['AT', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['AU', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['AZ', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['BA', 'EN-HR-BG-SL', 'SDWN ENHRBGSL'],
        ['BD', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['BE', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['BG', 'EN-HR-BG-SL', 'SDWN ENHRBGSL'],
        ['BO', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['BR', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['BW', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['BY', 'English-Russia', 'SDWN EngRus'],
        ['CA', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['CH', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['CI', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['CL', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['CM', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['CN', 'English-Chinese', 'SDWN EnglishChinese'],
        ['CO', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['CR', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['CX', 'EN-PL-CS-RO', 'SDWN ENPLCSRO'],
        ['CY', 'EN-TR-EL-IT', 'SDWN ENTRELIT'],
        ['CZ', 'EN-PL-CS-RO', 'SDWN ENPLCSRO'],
        ['DE', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['DK', 'EN-DA-SV-NN', 'SDWN ENDASVNN'],
        ['DO', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['DU', 'ENGLISH-ARABIC', 'SDWN EngArabic'],
        ['DX', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['DZ', 'ENGLISH-ARABIC', 'SDWN EnglishArabic Codal'],
        ['EC', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['EE', 'EN-FI-ET-LT', 'SDWN ENFIETLT'],
        ['EG', 'ENGLISH-ARABIC', 'SDWN EngArabic'],
        ['ES', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['FI', 'EN-FI-ET-LT', 'SDWN ENFIETLT'],
        ['FR', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['GB', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['GE', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['GH', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['GP', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['GR', 'EN-TR-EL-IT', 'SDWN ENTRELIT'],
        ['HK', 'English-Chinese', 'SDWN EnglishChinese'],
        ['HR', 'EN-HR-BG-SL', 'SDWN ENHRBGSL'],
        ['HU', 'English-Hungary (Printec)', 'SDWN EngHungary'],
        ['ID', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['IE', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['IL', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['IN', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['IQ', 'ENGLISH-ARABIC', 'SDWN EngArabic'],
        ['IR', 'ENGLISH-ARABIC', 'SDWN EngArabic'],
        ['IT', 'EN-TR-EL-IT', 'SDWN ENTRELIT'],
        ['JO', 'ENGLISH-ARABIC', 'SDWN EngArabic'],
        ['JP', 'English-Japanese', 'SDWN EngJapan'],
        ['KE', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['KG', 'English-Russia', 'SDWN EngRus'],
        ['KR', 'English-Korean', 'SDWN EngKorean'],
        ['KW', 'English-Arabic', 'SDWN EngArabic'],
        ['KZ', 'English-Russia', 'SDWN EngRus'],
        ['LB', 'ENGLISH-ARABIC', 'SDWN EngArabic'],
        ['LK', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['LT', 'EN-FI-ET-LT', 'SDWN ENFIETLT'],
        ['LV', 'EN-FI-ET-LT', 'SDWN ENFIETLT'],
        ['LY', 'ENGLISH-ARABIC', 'SDWN EngArabic'],
        ['MA', 'ENGLISH-ARABIC', 'SDWN EngArabic'],
        ['MC', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['MD', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['MU', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['MX', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['MY', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['NC', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['NG', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['NL', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['NO', 'EN-DA-SV-NN', 'SDWN ENDASVNN'],
        ['NP', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['NZ', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['OM', 'ENGLISH-ARABIC', 'SDWN EngArabic'],
        ['PE', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['PH', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['PK', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['PL', 'EN-PL-CS-RO', 'SDWN ENPLCSRO'],
        ['PR', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['PT', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['PY', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['QA', 'ENGLISH-ARABIC', 'SDWN EngArabic'],
        ['RO', 'EN-PL-CS-RO', 'SDWN ENPLCSRO'],
        ['RS', 'EN-HR-BG-SL', 'SDWN ENHRBGSL'],
        ['RU', 'English-Russia', 'SDWN EngRus'],
        ['SA', 'ENGLISH-ARABIC', 'SDWN EngArabic'],
        ['SD', 'ENGLISH-ARABIC', 'SDWN EngArabic'],
        ['SE', 'EN-DA-SV-NN', 'SDWN ENDASVNN'],
        ['SG', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['SI', 'EN-HR-BG-SL', 'SDWN ENHRBGSL'],
        ['SK', 'EN-PL-CS-RO', 'SDWN ENPLCS Gorbachev'],
        ['SN', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['SV', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['SY', 'ENGLISH-ARABIC', 'SDWN EngArabic'],
        ['TG', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['TH', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['TJ', 'English-Russia', 'SDWN EngRus'],
        ['TN', 'ENGLISH-ARABIC', 'SDWN EngArabic'],
        ['TR', 'EN-TR-EL-IT', 'SDWN ENTRELIT'],
        ['TT', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['TW', 'English-ChineseT', 'SDWN EnglishChinaT'],
        ['UA', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['UG', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['US', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['UZ', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['VE', 'EN-FR-ES-PT(BR)', 'SDWN ENFRESPTBR'],
        ['VN', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['XS', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['XX', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['ZA', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['ZM', 'EN-FR-DE-NL', 'SDWN ENFRDENL'],
        ['ZW', 'EN-FR-DE-NL', 'SDWN ENFRDENL']
    ]
    lang_lookup_df = pd.DataFrame(lookup_data, columns=['COUNTRY_CODE', 'NEW_LANG', 'SDWN'])
    return lang_lookup_df

language_lookup = create_language_lookup()

# Cell 4: Upload SOH Bottles
print("\nSTEP 1: Upload SOH Bottles Excel File")
soh_data, soh_filename = upload_excel_file("SOH Bottles Sheet")
if soh_data is not None:
    item_col = next((col for col in soh_data.columns if 'item' in str(col).lower()), None)
    if item_col:
        soh_data = soh_data[soh_data[item_col].notna() & (soh_data[item_col].astype(str).str.strip() != '')]
preview_data(soh_data, "SOH Bottles Data")

# Cell 5: Convert Export Sheet to Order Format with Filtering
print("\nSTEP 2: Upload and Convert Export Sheet to Order Format")
export_data, export_filename = upload_excel_file("Export Sheet")
if export_data is not None:
    print(f"Initial data shape: {export_data.shape[0]} rows × {export_data.shape[1]} columns")

    # Show column R (Status column) information
    if export_data.shape[1] >= 18:  # Column R is the 18th column (index 17)
        status_col = export_data.columns[17]  # Column R (0-indexed)
        print(f"\nColumn R (Status): '{status_col}'")
        if status_col in export_data.columns:
            status_values = export_data[status_col].value_counts()
            print("Status column values:")
            for status, count in status_values.items():
                print(f"  {status}: {count}")

    # Filter 1: Remove orders with Status = "Released" (Column R)
    status_column = None
    if export_data.shape[1] >= 18:
        status_column = export_data.columns[17]  # Column R
    else:
        # If column count is different, look for status column by name
        status_column = next((col for col in export_data.columns if 'status' in str(col).lower()), None)

    if status_column:
        print(f"\nFiltering out orders with Status = 'Released' from column: '{status_column}'")
        before_filter = len(export_data)

        # Remove rows where Status = "Released"
        export_data = export_data[
            ~(export_data[status_column].astype(str).str.upper().str.strip() == 'RELEASED')
        ]

        after_filter = len(export_data)
        print(f"Removed {before_filter - after_filter} orders with 'Released' status")
        print(f"Remaining orders: {after_filter}")
    else:
        print("WARNING: Status column not found")

    # Filter 2: Remove orders with batch numbers assigned
    # Look for batch-related columns
    batch_columns = []
    for col in export_data.columns:
        col_str = str(col).lower()
        if any(keyword in col_str for keyword in ['batch', 'lot', 'production order', 'work order']):
            batch_columns.append(col)

    print(f"\nFound potential batch columns: {batch_columns}")

    if batch_columns:
        before_batch_filter = len(export_data)

        # Remove orders that have batch numbers assigned (non-empty, non-null values)
        batch_filter_mask = pd.Series([False] * len(export_data))

        for batch_col in batch_columns:
            # Consider an order to have a batch if the batch column is not empty/null
            has_batch = (
                export_data[batch_col].notna() &
                (export_data[batch_col].astype(str).str.strip() != '') &
                (export_data[batch_col].astype(str).str.strip().str.upper() != 'NAN')
            )
            batch_filter_mask = batch_filter_mask | has_batch

            assigned_count = has_batch.sum()
            print(f"  {batch_col}: {assigned_count} orders have batch numbers assigned")

        # Remove orders with batch assignments
        export_data = export_data[~batch_filter_mask]

        after_batch_filter = len(export_data)
        print(f"Removed {before_batch_filter - after_batch_filter} orders with batch numbers assigned")
        print(f"Final remaining orders: {after_batch_filter}")
    else:
        print("No batch-related columns found")

    # Continue with existing filtering
    sales_col = next((col for col in export_data.columns if 'sales order' in str(col).lower()), None)
    if sales_col:
        before_sales_filter = len(export_data)
        export_data = export_data[export_data[sales_col].notna() & (export_data[sales_col].astype(str).str.strip() != '')]
        after_sales_filter = len(export_data)
        print(f"After removing empty sales orders: {after_sales_filter} orders remain")

    print(f"\nFinal filtered data shape: {export_data.shape[0]} rows × {export_data.shape[1]} columns")

    # Convert to order format
    order_data = pd.DataFrame()
    column_mappings = {
        'Order Number': ['sales order'],
        'Customer ID': ['ship to country'],
        'SKU Code': ['item'],
        'Original Order Quantity': ['quantity'],
        'Reserved Quantity': ['reserved quantity'],
        'Order Date (dd/mm/yyyy)': ['upload date', 'batch start date', 'order date', 'date'],
        'Requested Delivery Date (dd/mm/yyyy)': ['scheduled ship date', 'due date', 'schedule ship date'],
        'Priority': ['language'],
        'Order Type': ['delivery method'],
        'Agent Name': ['linx agent', 'on hold', 'agent']
    }

    for target_col, search_terms in column_mappings.items():
        source_col = next((col for col in export_data.columns if any(term.lower() in str(col).lower() for term in search_terms)), None)
        if source_col:
            order_data[target_col] = export_data[source_col]
            print(f"Mapped '{target_col}' to source column: '{source_col}'")
        else:
            if target_col == 'Agent Name':
                order_data[target_col] = 'Linx Agent'
            elif target_col == 'Order Date (dd/mm/yyyy)':
                order_data[target_col] = datetime.now().strftime('%d/%m/%Y')
            elif target_col == 'Reserved Quantity':
                order_data[target_col] = 0
                print(f"WARNING: No 'Reserved Quantity' column found. Defaulting to 0.")
            else:
                order_data[target_col] = ''

    # Convert quantities to numeric
    order_data['Original Order Quantity'] = pd.to_numeric(order_data['Original Order Quantity'], errors='coerce').fillna(0)
    order_data['Reserved Quantity'] = pd.to_numeric(order_data['Reserved Quantity'], errors='coerce').fillna(0)

    # Set Order Quantity to Reserved Quantity for consistency
    order_data['Order Quantity'] = order_data['Reserved Quantity']

    order_data['Location ID'] = 'WH_Default'

    if 'Order Number' in order_data.columns:
        order_line_data = order_data['Order Number'].apply(lambda x: ('LI' + str(x).split('/')[0], str(x).split('/')[1]) if '/' in str(x) else ('LI' + str(x), '1'))
        order_data['Order Number'] = [x[0] for x in order_line_data]
        order_data['Line Number'] = [x[1] for x in order_line_data]
    else:
        order_data['Line Number'] = range(1, len(export_data) + 1)

    for date_col in ['Order Date (dd/mm/yyyy)', 'Requested Delivery Date (dd/mm/yyyy)']:
        if date_col in order_data.columns:
            order_data[date_col] = pd.to_datetime(order_data[date_col], errors='coerce').dt.strftime('%d/%m/%Y')

    required_columns = [
        'Order Number', 'Line Number', 'Location ID', 'Customer ID', 'SKU Code',
        'Original Order Quantity', 'Order Quantity', 'Order Date (dd/mm/yyyy)',
        'Requested Delivery Date (dd/mm/yyyy)', 'Priority', 'Order Type', 'Agent Name'
    ]

    for col in required_columns:
        if col not in order_data.columns:
            order_data[col] = '1' if col == 'Line Number' else 'WH_Default' if col == 'Location ID' else 0 if col == 'Order Quantity' else ''

    order_data = order_data[required_columns]
    print(f"\nConverted {len(order_data)} open orders (after filtering out Released and batch-assigned orders)")
    preview_data(order_data, "Converted Order Data (Open Orders Only)")
else:
    order_data = None

# Cell 6: Convert SOH Bottles Sheet to Inventory Format
print("\nSTEP 3: Convert SOH Bottles Sheet to Inventory Format")
if soh_data is not None:
    inventory_data = pd.DataFrame()
    soh_mappings = {
        'SKU Code': ['item', 'sku'],
        'On Hand Inventory': ['available to reserve', 'available'],
        'Reordered Quantity': ['total quantity', 'onhand', 'stock', 'quantity'],
        'Locator': ['locator']
    }
    for target_col, search_terms in soh_mappings.items():
        source_col = next((col for col in soh_data.columns if any(term.lower() in str(col).lower() for term in search_terms)), None)
        if source_col:
            inventory_data[target_col] = soh_data[source_col]
        else:
            inventory_data[target_col] = 0 if 'quantity' in target_col.lower() or 'inventory' in target_col.lower() else ''

    exclude_mask = inventory_data['Locator'].astype(str).str.strip().str.upper() == '8900MAIN' if 'Locator' in inventory_data.columns else False
    inventory_data = inventory_data[~exclude_mask].copy()

    if 'Locator' in inventory_data.columns:
        inventory_data['Location ID'] = inventory_data['Locator']
    else:
        inventory_data['Location ID'] = ''

    current_time = datetime.now().strftime('%d-%m-%Y %H:%M:%S')
    inventory_data['Date and Time (DD-MM-YYYY HH:MM:SS)'] = current_time
    inventory_data['On Hand Inventory'] = pd.to_numeric(inventory_data['On Hand Inventory'], errors='coerce').fillna(0)
    inventory_data['Reordered Quantity'] = pd.to_numeric(inventory_data['Reordered Quantity'], errors='coerce').fillna(0)
    inventory_data = inventory_data.groupby(['SKU Code', 'Location ID', 'Date and Time (DD-MM-YYYY HH:MM:SS)'], as_index=False).agg({
        'On Hand Inventory': 'sum',
        'Reordered Quantity': 'sum'
    })
    inventory_data_with_locator = inventory_data.copy()
    inventory_data_with_locator['Locator'] = inventory_data_with_locator['Location ID']

    required_inventory_columns = [
        'Location ID', 'SKU Code', 'On Hand Inventory', 'Reordered Quantity',
        'Date and Time (DD-MM-YYYY HH:MM:SS)'
    ]
    for col in required_inventory_columns:
        if col not in inventory_data.columns:
            inventory_data[col] = '' if col == 'Location ID' else current_time if col == 'Date and Time (DD-MM-YYYY HH:MM:SS)' else 0
    inventory_data = inventory_data[required_inventory_columns]
    preview_data(inventory_data, "Converted Inventory Data")
else:
    inventory_data = None
    inventory_data_with_locator = None

# Cell 7: Calculate New Lang Label and Stock
def calculate_new_lang_label_and_stock(order_df, inventory_with_locator_df, lang_lookup_df):
    result_df = order_df.copy()
    if inventory_with_locator_df is None or lang_lookup_df is None:
        result_df['ITEM New LANG LABEL'] = result_df['SKU Code']
        result_df['SOH NEW LANG STOCK'] = 0
        return result_df

    def calculate_lang_info_for_item(row):
        sku_code = str(row.get('SKU Code', '')).strip()
        country = str(row.get('Customer ID', '')).strip().upper()
        new_lang_label = sku_code
        soh_new_lang_stock = 0
        if pd.isna(sku_code) or sku_code == '' or pd.isna(country) or country == '':
            return new_lang_label, soh_new_lang_stock
        country_match = lang_lookup_df[lang_lookup_df['COUNTRY_CODE'].str.upper() == country]
        if len(country_match) > 0:
            new_lang = country_match.iloc[0]['NEW_LANG']
            new_lang_label = f"{sku_code}{new_lang}"
            search_key = f"{sku_code}{new_lang}"
            matching_soh = inventory_with_locator_df[
                (inventory_with_locator_df['SKU Code'].astype(str).str.strip() +
                 inventory_with_locator_df['Locator'].astype(str).str.strip()).str.upper() == search_key.upper()
            ]
            if len(matching_soh) > 0:
                soh_new_lang_stock = pd.to_numeric(matching_soh['On Hand Inventory'], errors='coerce').fillna(0).sum()
            else:
                matching_soh_direct = inventory_with_locator_df[
                    inventory_with_locator_df['SKU Code'].astype(str).str.strip().str.upper() == search_key.upper()
                ]
                if len(matching_soh_direct) > 0:
                    soh_new_lang_stock = pd.to_numeric(matching_soh_direct['On Hand Inventory'], errors='coerce').fillna(0).sum()
        return new_lang_label, soh_new_lang_stock

    lang_results = result_df.apply(calculate_lang_info_for_item, axis=1, result_type='expand')
    result_df['ITEM New LANG LABEL'] = lang_results[0]
    result_df['SOH NEW LANG STOCK'] = lang_results[1]
    return result_df

# Cell 8: Calculate Qty Outstanding
def calculate_qty_outstanding(order_df):
    """
    Calculate Qty Outstanding = Original Order Quantity - Reserved Quantity
    Where Reserved Quantity is stored in 'Order Quantity' column
    """
    result_df = order_df.copy()

    # Convert to numeric with better error handling
    original_qty = pd.to_numeric(result_df['Original Order Quantity'], errors='coerce').fillna(0)
    reserved_qty = pd.to_numeric(result_df['Order Quantity'], errors='coerce').fillna(0)  # This is actually Reserved Quantity

    # Calculate outstanding quantity: Original - Reserved
    result_df['Qty Outstanding'] = (original_qty - reserved_qty).clip(lower=0)

    # Debug output
    print(f"\nQty Outstanding Calculation Debug:")
    print(f"Total orders: {len(result_df)}")
    print(f"Orders with Qty Outstanding = 0: {(result_df['Qty Outstanding'] == 0).sum()}")
    print(f"Orders with Qty Outstanding > 0: {(result_df['Qty Outstanding'] > 0).sum()}")

    # Show some examples
    complete_orders = result_df[result_df['Qty Outstanding'] == 0]
    if not complete_orders.empty:
        print(f"\nSample orders with Qty Outstanding = 0 (should be COMPLETE):")
        print(complete_orders[['SKU Code', 'Original Order Quantity', 'Order Quantity', 'Qty Outstanding']].head())

    outstanding_orders = result_df[result_df['Qty Outstanding'] > 0]
    if not outstanding_orders.empty:
        print(f"\nSample orders with Qty Outstanding > 0:")
        print(outstanding_orders[['SKU Code', 'Original Order Quantity', 'Order Quantity', 'Qty Outstanding']].head(3))

    # Show distribution
    print(f"\nQty Outstanding distribution:")
    print(result_df['Qty Outstanding'].describe())

    return result_df

# Cell 9: Calculate Available CAPS
def calculate_available_caps(order_df, inventory_df):
    result_df = order_df.copy()
    if inventory_df is None:
        result_df['AVAILABLE CAPS'] = 0
        return result_df

    def calculate_caps_for_item(item_code):
        if pd.isna(item_code) or str(item_code).strip() == '':
            return 0
        item_str = str(item_code).strip()
        if len(item_str) >= 7:
            mid_substring = item_str[2:7]
            search_pattern = f"AS{mid_substring}"
            matching_items = inventory_df[
                inventory_df['SKU Code'].astype(str).str.contains(search_pattern, case=False, na=False, regex=False)
            ]
            if len(matching_items) > 0:
                return pd.to_numeric(matching_items['On Hand Inventory'], errors='coerce').fillna(0).sum()
        return 0

    result_df['AVAILABLE CAPS'] = result_df['SKU Code'].apply(calculate_caps_for_item)
    return result_df

# Cell 10: Calculate 5 LANG Box Stock item (Y/N)
def calculate_5_lang_box_stock(order_df, inventory_df):
    result_df = order_df.copy()
    if inventory_df is None:
        result_df['5 LANG Box Stock item (Y/N)'] = 'N'
        return result_df

    def calculate_lang_box_for_item(sku_code):
        if pd.isna(sku_code) or str(sku_code).strip() == '':
            return 'N'
        sku_str = str(sku_code).strip().upper()
        matching_rows = inventory_df[
            inventory_df['SKU Code'].astype(str).str.strip().str.upper() == sku_str
        ]
        if len(matching_rows) > 0:
            soh_stock = pd.to_numeric(matching_rows['On Hand Inventory'], errors='coerce').fillna(0).sum()
            return 'Y' if soh_stock > 0 else 'N'
        return 'N'

    result_df['5 LANG Box Stock item (Y/N)'] = result_df['SKU Code'].apply(calculate_lang_box_for_item)
    return result_df

# Cell 11: Calculate 5LL Pick Rule
def calculate_5LL_pick_rule(order_df):
    result_df = order_df.copy()
    exclusion_skus = {
        'FAC1248/5L', 'FAC1058/5L', 'FAC1079/5L', 'FAC1039/5L', 'FAC1405/5L',
        'FAC1063/5L', 'FAC1075/5L', 'FAC1291/5L', 'FAC1121/5L', 'FAC1056/5L',
        'FAC1055/5L', 'FAC1062/5L', 'FAC3160/5L', 'FAC1068/5L', 'FAC1240/M',
        'FAC1130/5L', 'FAC1016/5L', 'FAC3203/5L', 'FAC3401/5L', 'FAC1018/5L',
        'FAC1290/5L', 'FAC1009/5L', 'FAC1035/5L', 'FAC2250/5L', 'FAC1033/5L',
        'FAC1088/5L', 'FAC1065/5L', 'FAC2035/5L', 'FAC1077/5L', 'FAC3123/5L',
        'FAC1243/5L', 'FACL100/5L', 'FAC3124/5L', 'FAC1281/5L', 'FAC1070/5L',
        'FAC3240/5L', 'FAC3085/5L', 'FAC1085/5L', 'FAC2030/5L', 'FAC3560/5L',
        'FACL101/M', 'FACL102/M'
    }
    exclusion_skus_upper = {sku.upper() for sku in exclusion_skus}
    result_df['5LL Pick Rule'] = result_df.apply(lambda row: "EXCL" if str(row.get('SKU Code', '')).strip().upper() in exclusion_skus_upper else "PFS", axis=1)
    return result_df

# Cell 12: Apply All Calculations
print("\nSTEP 4: Apply All Calculations")
if order_data is not None and inventory_data is not None:
    enhanced_order_data = calculate_qty_outstanding(order_data)
    enhanced_order_data = calculate_available_caps(enhanced_order_data, inventory_data)
    enhanced_order_data = calculate_5_lang_box_stock(enhanced_order_data, inventory_data)
    enhanced_order_data = calculate_5LL_pick_rule(enhanced_order_data)

    if inventory_data_with_locator is not None:
        enhanced_order_data = calculate_new_lang_label_and_stock(enhanced_order_data, inventory_data_with_locator, language_lookup)
    else:
        enhanced_order_data = calculate_new_lang_label_and_stock(enhanced_order_data, inventory_data, language_lookup)

# Cell 13: Classification Logic (UPDATED)
def classify_production_status(row):
    # Get values and handle potential data type issues
    item = str(row.get('SKU Code', '')).strip()
    order_type = str(row.get('Order Type', '')).strip().upper()

    # Convert qty_outstanding to float, handling various data types
    try:
        qty_outstanding = float(row.get('Qty Outstanding', 0))
    except (ValueError, TypeError):
        qty_outstanding = 0.0

    try:
        available_caps = float(row.get('AVAILABLE CAPS', 0))
    except (ValueError, TypeError):
        available_caps = 0.0

    try:
        soh_new_lang_stock = float(row.get('SOH NEW LANG STOCK', 0))
    except (ValueError, TypeError):
        soh_new_lang_stock = 0.0

    # FIXED: Reference the correct column name '5LL Pick Rule'
    pick_rule_5LL = str(row.get('5LL Pick Rule', '')).strip().upper()

    # First check: Does item start with 'B'?
    if item and item[0].upper() == "B":
        return "Raw Material"

    # Second check: No item code found?
    elif not item or item.upper() == 'NAN':
        return ""

    # Third check: Is quantity outstanding = 0? (THIS IS THE COMPLETE CHECK)
    elif qty_outstanding == 0 or qty_outstanding <= 0:
        return "COMPLETE"

    # Fourth check: Does item end with "1L"?
    elif len(item) >= 2 and item[-2:].upper() == "1L":
        return "Repack"

    # Fifth check: Does item end with C, E, F, or M?
    elif len(item) > 0 and item[-1].upper() in ["C", "E", "F", "M"]:
        return "Repack"

    # Sixth check: Order Type "ND" and 5LL Pick Rule "PFS"?
    elif order_type == "ND" and pick_rule_5LL == "PFS":
        return "Pick From Stock"

    # Seventh check: Order Type "TRUCK" and 5LL Pick Rule "PFS"?
    elif order_type == "TRUCK" and pick_rule_5LL == "PFS":
        return "Pick From Stock"

    # Eighth check: FAC item with qty >= 20 and Order Type "AIR"?
    elif len(item) >= 3 and item[:3].upper() == "FAC" and qty_outstanding >= 20 and order_type == "AIR":
        return "PLAN"

    # Ninth check: SOH NEW LANG stock condition?
    elif soh_new_lang_stock > 0 and qty_outstanding < (soh_new_lang_stock * 0.5):
        return "Pick From Stock"

    # Tenth check: Small quantity with available caps?
    elif qty_outstanding < 12 and available_caps > 0 and qty_outstanding < (available_caps / 10):
        return "Repack"

    # Default case
    else:
        return "PLAN"

# Cell 14: Apply Classification and Create Final Output
print("\nSTEP 5: Apply Classification and Create Final Output")
if 'enhanced_order_data' in locals() and enhanced_order_data is not None:
    final_data = enhanced_order_data.copy()

    # Apply classification
    final_data['New Production Status'] = final_data.apply(classify_production_status, axis=1)

    # Debug: Check classification results
    status_counts = final_data['New Production Status'].value_counts()
    print("\nClassification Results:")
    for status, count in status_counts.items():
        print(f"  {status}: {count}")

    # Show some examples of COMPLETE items if they exist
    complete_items = final_data[final_data['New Production Status'] == 'COMPLETE']
    if len(complete_items) > 0:
        print(f"\nFirst few COMPLETE items:")
        print(complete_items[['SKU Code', 'Qty Outstanding', 'New Production Status']].head())
    else:
        print("\nNo COMPLETE items found. Checking Qty Outstanding values:")
        zero_qty = final_data[final_data['Qty Outstanding'] == 0]
        if len(zero_qty) > 0:
            print(f"Found {len(zero_qty)} items with Qty Outstanding = 0:")
            print(zero_qty[['SKU Code', 'Qty Outstanding', 'Original Order Quantity', 'Order Quantity']].head())
        else:
            print("No items with Qty Outstanding = 0 found.")
            print("Sample Qty Outstanding values:")
            print(final_data['Qty Outstanding'].describe())

    final_output_columns = [
        'Order Number', 'Line Number', 'Location ID', 'Customer ID', 'SKU Code',
        'Original Order Quantity', 'Order Quantity', 'Order Date (dd/mm/yyyy)',
        'Requested Delivery Date (dd/mm/yyyy)', 'Priority', 'Order Type', 'Agent Name',
        'Qty Outstanding', 'AVAILABLE CAPS', '5 LANG Box Stock item (Y/N)', '5LL Pick Rule',
        'ITEM New LANG LABEL', 'SOH NEW LANG STOCK', 'New Production Status'
    ]
    final_output = final_data[final_output_columns]

# Cell 15: Export Results to 3 Excel Files
print("\nSTEP 6: Export Results to 3 Excel Files")
if 'final_output' in locals() and final_output is not None and order_data is not None and inventory_data is not None:
    # File 1: Final Results
    final_results_filename = 'Final_Production_Status_Results.xlsx'
    print(f"Creating File 1: {final_results_filename}")
    with pd.ExcelWriter(final_results_filename, engine='xlsxwriter') as writer:
        final_output.to_excel(writer, sheet_name='Final_Results', index=False)
        workbook = writer.book
        header_format = workbook.add_format({
            'bold': True, 'text_wrap': True, 'valign': 'top',
            'fg_color': '#4472C4', 'font_color': 'white', 'border': 1
        })
        worksheet = writer.sheets['Final_Results']
        for col_num, column_name in enumerate(final_output.columns):
            worksheet.write(0, col_num, column_name, header_format)
            max_len = max(len(str(column_name)), final_output[column_name].astype(str).map(len).max() if not final_output.empty else 10)
            worksheet.set_column(col_num, col_num, min(max_len + 2, 50))
    files.download(final_results_filename)

    # File 2: Converted Order Data
    order_filename = 'Converted_Order_Data.xlsx'
    print(f"Creating File 2: {order_filename}")
    with pd.ExcelWriter(order_filename, engine='xlsxwriter') as writer:
        order_data.to_excel(writer, sheet_name='Order_Data', index=False)
        workbook = writer.book
        header_format = workbook.add_format({
            'bold': True, 'text_wrap': True, 'valign': 'top',
            'fg_color': '#4472C4', 'font_color': 'white', 'border': 1
        })
        worksheet = writer.sheets['Order_Data']
        for col_num, column_name in enumerate(order_data.columns):
            worksheet.write(0, col_num, column_name, header_format)
            max_len = max(len(str(column_name)), order_data[column_name].astype(str).map(len).max() if not order_data.empty else 10)
            worksheet.set_column(col_num, col_num, min(max_len + 2, 50))
    files.download(order_filename)

    # File 3: Converted Inventory Data
    inventory_filename = 'Converted_Inventory_Data.xlsx'
    print(f"Creating File 3: {inventory_filename}")
    with pd.ExcelWriter(inventory_filename, engine='xlsxwriter') as writer:
        inventory_data.to_excel(writer, sheet_name='Inventory_Data', index=False)
        workbook = writer.book
        header_format = workbook.add_format({
            'bold': True, 'text_wrap': True, 'valign': 'top',
            'fg_color': '#4472C4', 'font_color': 'white', 'border': 1
        })
        worksheet = writer.sheets['Inventory_Data']
        for col_num, column_name in enumerate(inventory_data.columns):
            worksheet.write(0, col_num, column_name, header_format)
            max_len = max(len(str(column_name)), inventory_data[column_name].astype(str).map(len).max() if not inventory_data.empty else 10)
            worksheet.set_column(col_num, col_num, min(max_len + 2, 50))
    files.download(inventory_filename)

print("\nAll files have been created and downloaded successfully!")